@using System.Globalization
@using BlazorCalendar.Models


@inherits CalendarBase

@{
    double w = (WidthWindow / Months);
    string largeur = Convert.ToString(w, CultureInfo.InvariantCulture);
    string labelMonth = "";
    string labelDay = "";
    string CSSbackground = "";
    string taskContent = "";
    string? taskColor = null;
    string? taskComment = null;
    string? classPin = null;
    string? classPointer = null;
    int tasksNumber;
}

<div class="calendar-contener" Style="@Style">

@for (var month = 0; month <= Months; month++)
{
    m = FirstDate.AddMonths(month);
    labelMonth = new DateTime(m.Year, m.Month, 1).ToString("MMMM");

    <div class="month-column" >
	    <div class="cellule month centertext noselect" >
            @labelMonth
        </div>
        
        @{
            day = new DateTime(m.Year, m.Month, 1);
        }

        @for (var i = 0; i < 31; i++)
        {
            CSSbackground = null;
            var j = day.AddDays(i);
            if (j.Month != m.Month)
            {
                labelDay = "";
                taskContent = "";
                taskColor = null;
                taskComment = null;
                classPin = null;
                classPointer = null;
            }
            else
            {
                int d = (int)j.DayOfWeek;
                if (d == 6)
                {
                    CSSbackground = SaturdayColor;
                }
                else if (d == 0)
                {
                    CSSbackground = SundayColor;
                }
                else
                {
                    CSSbackground = WeekDaysColor;
                }

                string jour = j.ToString("ddd").Substring(0, 1).ToUpper();
                labelDay = $"{jour} {j.Day.ToString()}";

                    taskContent = "";
                    taskColor = null;
                    taskComment = null;
                    classPin = null;
                    classPointer = null;
                    tasksNumber = 0;
                    if ( TasksList != null )
                    {
                        for (var k = 0; k < TasksList.Length; k++)
                        {
                             Tasks t = TasksList[k];

                            if ( t.DateStart.Date <= j.Date && j.Date <= t.DateEnd.Date )
                            {
                                tasksNumber++;
                                taskContent = t.Code;
                                taskColor = $"background:{t.Color};color:{t.ForeColor}";
                                taskComment = t.Comment;
                                classPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                                classPointer = " pointer";
                            }
                        }   
                    }
                    if ( tasksNumber > 1 )
                    {
                        taskContent = "…";
                        taskComment = null;
                        taskColor = null;
                        classPin = " pin-top";
                    }
            }  
            <div class="cellule day-cellule noselect" style="@($"background:{WeekDaysColor}")">
                <div class="day" style="@($"background:{CSSbackground}")">
                    @labelDay
                </div>
                <div class="@($"task{classPin}{classPointer}")" style="@taskColor" title="@taskComment" @onclick="e => TaskClickInternal(e, j)">
                     @taskContent
                </div>
            </div>        
            
        }
    </div>
}

</div>

