@using System.Globalization
@using BlazorCalendar.Models
@inherits CalendarBase

@{
    FirstDate = new DateTime(FirstDate.Year, FirstDate.Month, 1);
    int firstDayWeek = (int)FirstDate.DayOfWeek;
    int State = 0; // 0 Before , 1 'in' Month, 2 After
    DateTime LastDay = new DateTime(FirstDate.Year, FirstDate.Month, 1).AddMonths(1);
    DateTime DayCounter = FirstDate;
    string[] dayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    int OffsetCell = 0;
    var m = 0;
}
<div class="calendar-container">
    <div class="monthly-calendar">
        
        @for (var i = 0; i < 7; i++)
        {
            var d = Dates.GetNumOfDay(i);

            <span class="header-name noselect" style="@HeaderStyle">
                @dayNames[d]
            </span> 
        }

        @for ( var i = 0; i < 40; i++ )
        {        
            if ( State == 0 ) // First empty cells part
            {
                if ( firstDayWeek == Dates.GetNumOfDay(i) )  // Cell is first day?
                {
                    State = 1; // Start filling days    
                    <div class="monthly-day">@(DayCounter.Day.ToString())</div>
                    DayCounter = DayCounter.AddDays(1);
                    OffsetCell = i;
                } 
                else
                {
                    // Still empty cells
                    <div class="monthly-day monthly-day--disabled cursor-top" @onclick="() => HandleClickOutsideCurrentMonthClick(-1)"></div>
                }
            }
            if ( State == 1 )
            {
                if ( DayCounter >= LastDay ) // Stop at last day
                {
                    State = 2;
                    // Again empty cells from here on
                    <div class="monthly-day monthly-day--disabled cursor-bottom" @onclick="() => HandleClickOutsideCurrentMonthClick(1)"></div>
                }
                else
                {
                    <div class="monthly-day noselect">@(DayCounter.Day.ToString())</div>
                    DayCounter = DayCounter.AddDays(1);
                }
            }
            if ( State == 2 )
            {
                <div class="monthly-day monthly-day--disabled cursor-bottom" @onclick="() => HandleClickOutsideCurrentMonthClick(1)"></div>
            }
        }
        
        @if ( TasksList != null )
        {
            for (var k = 0; k < TasksList.Length; k++)
            {
                Tasks t = TasksList[k];

                if ( ( t.DateStart.Date <= FirstDate && LastDay <= t.DateEnd.Date ) || 
                        ( t.DateStart.Date > FirstDate && LastDay > t.DateEnd.Date )
                    )
                {
                    int c = ((t.DateStart.Date.Day + (OffsetCell - 1) ) % 7) + 1; 
                    int r = ((t.DateStart.Date.Day + 3 + (OffsetCell - 1) ) / 6) + 1;
                    int s = (int)(t.DateEnd.Date - t.DateStart.Date).TotalDays + 1;
                    string row = $"grid-column: {c} / span {s}; grid-row: {r};";
                    string taskColor = $"background:{t.Color};color:{t.ForeColor}"; 

                    <section class="monthly-task" style="@row @taskColor" draggable="true">@t.DateStart.Date.Day @t.Code</section>
                }

            }
        }
  </div>
</div>
