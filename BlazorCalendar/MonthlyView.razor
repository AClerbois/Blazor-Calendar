@using System.Globalization
@using BlazorCalendar.Models
@inherits CalendarBase

@{
    FirstDate = new DateTime(FirstDate.Year, FirstDate.Month, 1);
    int firstDayWeek = (int)FirstDate.DayOfWeek;
    int State = 0; // 0 Before , 1 'in' Month, 2 After
    DateTime LastDay = new DateTime(FirstDate.Year, FirstDate.Month, 1).AddMonths(1);
    DateTime DayCounter = FirstDate;
    string[] dayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    int OffsetCell = 0;
    string? isHidden = DisplayedView == DisplayedView.Monthly ? null : "hidden-element"; 
    string? CSSbackground = null;

    // The sorting must be done each time we redraw in case the user moves the spots
    if (TasksList != null)
    {
        TasksList = TasksList.OrderBy(x => x.DateStart)
                             .ThenByDescending(x => x.DateEnd).ToArray();
    }
}
<div class="@isHidden monthly-calendar" style="@Style">
        
    @for (var i = 0; i < 7; i++)
    {
        var d = Dates.GetNumOfDay(i);

        <span class="header-name noselect" style="@HeaderStyle">
            @dayNames[d]
        </span> 
    }

    @for ( var i = 0; i < 40; i++ )
    {   
        if ( State == 0 ) // First empty cells part
        {
            if ( firstDayWeek == Dates.GetNumOfDay(i) )  // Cell is first day?
            {
                State = 1; // Start filling days   
                var dayClick = DayCounter;
                CSSbackground = GetBackground(dayClick);
                <div class="fade-in monthly-day noselect" 
                    style="@CSSbackground"
                    ondragover="event.preventDefault();"
                    @onclick="e => ClickDayInternal(e, dayClick)" 
                    @ondrop="() => HandleDayOnDrop(dayClick)">
                    @(DayCounter.Day.ToString())
                </div>
                DayCounter = DayCounter.AddDays(1);
                OffsetCell = i;
            } 
            else
            {
                // Still empty cells
                <div class="monthly-day monthly-day--disabled cursor-top" @onclick="() => HandleClickOutsideCurrentMonthClick(-1)"></div>
            }
        }
        if ( State == 1 )
        {
            if ( DayCounter >= LastDay ) // Stop at last day
            {
                State = 2;
                // Again empty cells from here on
                <div class="monthly-day monthly-day--disabled cursor-bottom" @onclick="() => HandleClickOutsideCurrentMonthClick(1)"></div>
            }
            else
            {
                var _dayClick = DayCounter;
                CSSbackground = GetBackground(_dayClick);
                <div class="fade-in monthly-day noselect" 
                    style="@CSSbackground"
                    ondragover="event.preventDefault();"
                    @onclick="e => ClickDayInternal(e, _dayClick)" 
                    @ondrop="() => HandleDayOnDrop(_dayClick)">
                    @(DayCounter.Day.ToString())
                </div>
                DayCounter = DayCounter.AddDays(1);
            }
        }
        if ( State == 2 )
        {
            <div class="monthly-day monthly-day--disabled cursor-bottom" @onclick="() => HandleClickOutsideCurrentMonthClick(1)"></div>
        }
    }
        
    @if ( TasksList != null )
    {
        // arrCell accumulates the number of tasks in a cell
        int[] arrCell = new int[32]; // If one day, there are 32 days in a month, it will crash :D
        string classPosition = "";
        string taskContent = "";  
        string? taskComment = null;   
        bool onmMultiLine = false;  
        bool draggable = false;

        for (var k = 0; k < TasksList.Length; k++)
        {
            Tasks t = TasksList[k];

            if (( t.DateStart.Date <= FirstDate && FirstDate <= t.DateEnd.Date ) || 
                ( t.DateStart.Date > FirstDate && LastDay > t.DateEnd.Date ) || 
                ( t.DateStart.Date < LastDay && LastDay <= t.DateEnd.Date ))
            {
                draggable = t.NotBeDraggable ? false : Draggable;

                // Reframes dates in the month
                DateTime Start = t.DateStart.Date < FirstDate ? FirstDate : t.DateStart.Date; 
                DateTime End = t.DateEnd.Date >= LastDay ? LastDay.AddDays(-1) : t.DateEnd.Date;

                // 7 => num of colum (a week..)
                // + 2 => the 1st row is the week name
                int x = (Start.Day + OffsetCell - 1) % 7 + 1; 
                int y = (Start.Day + OffsetCell - 1) / 7 + 2;
                int s = (int)(End.Date - Start.Date).TotalDays + 1;

                do
                {
                    
                    string row = $"grid-column:{x} / span {s}; grid-row:{y};";

                    if ( arrCell[Start.Day] == 0 )
                    {
                        classPosition = "monthly-task-first";    
                    } 
                    else if ( arrCell[Start.Day] == 1 )
                    {
                        classPosition = "monthly-task-second";
                    }
                    
                    
                    if ( arrCell[Start.Day] < 2 )
                    {   
                        if ( PriorityDisplay == PriorityLabel.Code )
                        {   
                            taskContent = string.IsNullOrWhiteSpace(t.Code) ? t.Caption : t.Code;
                        }
                        else
                        {   
                            taskContent = string.IsNullOrWhiteSpace(t.Caption) ? t.Code : t.Caption;
                        }

                        taskComment = string.IsNullOrWhiteSpace(t.Comment) ? null : t.Comment;

                        string taskColor = $"background:{t.Color};color:{t.ForeColor}";
                        <div class="fade-in monthly-task @classPosition" 
                                 style="@row @taskColor" 
                                 title="@taskComment"
                                 draggable="@draggable.ToString()"
                                 @onclick="e => ClickTaskInternal(e, t.ID)"
                                 @ondragstart="() => HandleDragStart(t.ID)">
                            @taskContent
                        </div>
                    }
                    else
                    {
                        // Mode 2 tasks in cell => we display "more..."
                        <div class="fade-in monthly-more-tasks noselect"
                                 style="@row" 
                                 @onclick="e => ClickAllDayInternal(e, Start)">
                            @($"+ {arrCell[Start.Day]-1} ...")
                        </div>
                    }

                    onmMultiLine = false;
                    if (x + s > 8) 
                    {
                        //s = 8 - x;
                        onmMultiLine = true;

                        Start = Start.AddDays(8 - x); 
                        End = t.DateEnd.Date >= LastDay ? LastDay.AddDays(-1) : t.DateEnd.Date;

                        x = (Start.Day + OffsetCell - 1) % 7 + 1; 
                        y = (Start.Day + OffsetCell - 1) / 7 + 2;
                        s = (int)(End.Date - Start.Date).TotalDays + 1;  
                    }

                } while ( onmMultiLine );

                // Start et End may have been modified, I redefine them for the whole month
                Start = t.DateStart.Date < FirstDate ? FirstDate : t.DateStart.Date; 
                End = t.DateEnd.Date >= LastDay ? LastDay.AddDays(-1) : t.DateEnd.Date;

                for (var d = Start.Day; d <= End.Day; d++)
                {     
                    arrCell[d]++;
                }

            }
        }
    }
</div>
